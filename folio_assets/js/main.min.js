function msieversion(){return window.navigator.userAgent.indexOf("MSIE ")>0||navigator.userAgent.match(/Trident.*rv\:11\./),!1}function gridLayouter(o){console.log(o);for(var n=1,t=0;t<o.length;t++)$("#instagrid"+n+">.insta-post-appender").append('<img src="'+o[t]+'">'),console.log("hi"),4==++n&&(n=1)}window.sr=ScrollReveal(),sr.reveal("#intro",{duration:2e3}),sr.reveal("#my-work",{duration:3e3}),$(window).scroll(function(){$(".navbar").offset().top>50?$(".navbar-fixed-top").addClass("top-nav-collapse"):$(".navbar-fixed-top").removeClass("top-nav-collapse")}),$(function(){$(document).on("click","a.page-scroll",function(o){var n=$(this);$("html, body").stop().animate({scrollTop:$(n.attr("href")).offset().top},1500,"easeInOutExpo"),o.preventDefault()})}),new Tippy(".tippy",{position:"right",animation:"fade",duration:300,arrow:!0,animateFill:!0,size:"big"}),$.get("./folio_assets/json/instapost.json",function(o){for(var n=[],t=o.items,e=0;e<9;e++)n.push(t[e].images.low_resolution.url);gridLayouter(n)});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsibXNpZXZlcnNpb24iLCJ3aW5kb3ciLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpbmRleE9mIiwibWF0Y2giLCJncmlkTGF5b3V0ZXIiLCJwb3N0cyIsImNvbnNvbGUiLCJsb2ciLCJjb3VudGVyIiwiaSIsImxlbmd0aCIsIiQiLCJhcHBlbmQiLCJzciIsIlNjcm9sbFJldmVhbCIsInJldmVhbCIsImR1cmF0aW9uIiwic2Nyb2xsIiwib2Zmc2V0IiwidG9wIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsImRvY3VtZW50Iiwib24iLCJldmVudCIsIiRhbmNob3IiLCJ0aGlzIiwic3RvcCIsImFuaW1hdGUiLCJzY3JvbGxUb3AiLCJhdHRyIiwicHJldmVudERlZmF1bHQiLCJUaXBweSIsInBvc2l0aW9uIiwiYW5pbWF0aW9uIiwiYXJyb3ciLCJhbmltYXRlRmlsbCIsInNpemUiLCJnZXQiLCJkYXRhIiwicG9zdENvbGxlY3RvciIsIml0ZW1zIiwicHVzaCIsImltYWdlcyIsImxvd19yZXNvbHV0aW9uIiwidXJsIl0sIm1hcHBpbmdzIjoiQUFZQSxRQUFBQSxlQVdBLE1BVEFDLFFBQUFDLFVBQUFDLFVBQ0FDLFFBQUEsU0FFQSxHQUFBRixVQUFBQyxVQUFBRSxNQUFBLHNCQU1BLEVBcURBLFFBQUFDLGNBQUFDLEdBQ0FDLFFBQUFDLElBQUFGLEVBRUEsS0FBQSxHQURBRyxHQUFBLEVBQ0FDLEVBQUEsRUFBQUEsRUFBQUosRUFBQUssT0FBQUQsSUFHQUUsRUFBQSxhQUFBSCxFQUFBLHlCQUFBSSxPQUFBLGFBQUFQLEVBQUFJLEdBQUEsTUFDQUgsUUFBQUMsSUFBQSxNQUVBLEtBREFDLElBRUFBLEVBQUEsR0FuREFULE9BQUFjLEdBQUFDLGVBQ0FELEdBQUFFLE9BQUEsVUFBQUMsU0FBQSxNQUNBSCxHQUFBRSxPQUFBLFlBQUFDLFNBQUEsTUFHQUwsRUFBQVosUUFBQWtCLE9BQUEsV0FDQU4sRUFBQSxXQUFBTyxTQUFBQyxJQUFBLEdBQ0FSLEVBQUEscUJBQUFTLFNBQUEsb0JBRUFULEVBQUEscUJBQUFVLFlBQUEsc0JBS0FWLEVBQUEsV0FDQUEsRUFBQVcsVUFBQUMsR0FBQSxRQUFBLGdCQUFBLFNBQUFDLEdBQ0EsR0FBQUMsR0FBQWQsRUFBQWUsS0FDQWYsR0FBQSxjQUFBZ0IsT0FBQUMsU0FDQUMsVUFBQWxCLEVBQUFjLEVBQUFLLEtBQUEsU0FBQVosU0FBQUMsS0FDQSxLQUFBLGlCQUNBSyxFQUFBTyxxQkFNQSxHQUFBQyxPQUFBLFVBQ0FDLFNBQUEsUUFDQUMsVUFBQSxPQUNBbEIsU0FBQSxJQUNBbUIsT0FBQSxFQUNBQyxhQUFBLEVBQ0FDLEtBQUEsUUE2QkExQixFQUFBMkIsSUFBQSxxQ0FBQSxTQUFBQyxHQUtBLElBQUEsR0FIQUMsTUFDQW5DLEVBQUFrQyxFQUFBRSxNQUVBaEMsRUFBQSxFQUFBQSxFQUFBLEVBQUFBLElBQ0ErQixFQUFBRSxLQUFBckMsRUFBQUksR0FBQWtDLE9BQUFDLGVBQUFDLElBSUF6QyxjQUFBb0MiLCJmaWxlIjoibWFpbi5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJcclxuLyoqIEBhdXRob3IgU2hpaGFiIFBNICggVUkgRGV2ZWxvcGVyIClcclxuICogIExvYWRpbmcgdGhlIG1haW4gYXBwIG1vZHVsZSB3aXRoIHRoZSBkZXBlbmRlbnQgbW9kdWxlcyBcclxuICovXHJcblxyXG4vLyA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG4gICAgLy8gVXNlciBFeHBlcmllbmNlIHJlbGF0ZWQgSmF2YVNjcmlwdFxyXG4vLyAgPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgICAgICAgICAgLy9EZWNhbGFyZSB2YXJzXHJcbiAgICAgXHJcblxyXG4gICAgICAgICAgICAvL2NoZWNraW5nIHdldGhlciB0aGUgdXNlciBpcyB1c2luZyBJRSBcclxuICAgICAgICAgICAgZnVuY3Rpb24gbXNpZXZlcnNpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgdmFyIHVhID0gd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQ7XHJcbiAgICAgICAgICAgICAgICB2YXIgbXNpZSA9IHVhLmluZGV4T2YoXCJNU0lFIFwiKTtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAobXNpZSA+IDAgfHwgISFuYXZpZ2F0b3IudXNlckFnZW50Lm1hdGNoKC9UcmlkZW50LipydlxcOjExXFwuLykpICAvLyBJZiBJbnRlcm5ldCBFeHBsb3JlciwgcmV0dXJuIHZlcnNpb24gbnVtYmVyXHJcbiAgICAgICAgICAgICAgICB7XHJcbiAgICAgICAgICAgICAgICAvLyBwb3AgdXAgYSBtb2RhbCBib3ggc2F5aW5nIGZvciBiZXR0ZXIgZXhwZXJpZW5jZSBJIHJlY29tbWVuZCB0byB1c2UgY2hyb21lIG9yIGZpcmVmb3ggb3Igc2FmYXJpXHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIFxyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG5cclxuLy8gbXNpZXZlcnNpb24oKTsgLy8gZm9yIHRoZSBtb21lbnQgY29tbWVudGVkIHRoaXMgY29kZSBsb3QgdG8gd29yayBvbiB0aGlzIGF0IGxhc3RcclxuXHJcblxyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgIC8vIERlc2lnbiBSZWFsdGVkIEphdmFzY3JpcHRcclxuLy8gID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgICAgICAgICAvLyBKYXZhU2NyaXB0XHJcbiAgICAgICAgICAgIHdpbmRvdy5zciA9IFNjcm9sbFJldmVhbCgpO1xyXG4gICAgICAgICAgICBzci5yZXZlYWwoJyNpbnRybycseyBkdXJhdGlvbjogMjAwMCB9KTtcclxuICAgICAgICAgICAgc3IucmV2ZWFsKCcjbXktd29yaycseyBkdXJhdGlvbjogMzAwMCB9KTtcclxuXHJcbiAgICAgICAgICAgIC8vIGpRdWVyeSB0byBjb2xsYXBzZSB0aGUgbmF2YmFyIG9uIHNjcm9sbFxyXG4gICAgICAgICAgICAkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgaWYgKCQoXCIubmF2YmFyXCIpLm9mZnNldCgpLnRvcCA+IDUwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJChcIi5uYXZiYXItZml4ZWQtdG9wXCIpLmFkZENsYXNzKFwidG9wLW5hdi1jb2xsYXBzZVwiKTtcclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgJChcIi5uYXZiYXItZml4ZWQtdG9wXCIpLnJlbW92ZUNsYXNzKFwidG9wLW5hdi1jb2xsYXBzZVwiKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAvL2pRdWVyeSBmb3IgcGFnZSBzY3JvbGxpbmcgZmVhdHVyZSAtIHJlcXVpcmVzIGpRdWVyeSBFYXNpbmcgcGx1Z2luXHJcbiAgICAgICAgICAgICQoZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnYS5wYWdlLXNjcm9sbCcsIGZ1bmN0aW9uKGV2ZW50KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgdmFyICRhbmNob3IgPSAkKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgICAgICQoJ2h0bWwsIGJvZHknKS5zdG9wKCkuYW5pbWF0ZSh7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHNjcm9sbFRvcDogJCgkYW5jaG9yLmF0dHIoJ2hyZWYnKSkub2Zmc2V0KCkudG9wXHJcbiAgICAgICAgICAgICAgICAgICAgfSwgMTUwMCwgJ2Vhc2VJbk91dEV4cG8nKTtcclxuICAgICAgICAgICAgICAgICAgICBldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgICAgIC8vIFRvb2x0aXAgR2VuZXJhdG9yIGNsYXNzIFxyXG4gICAgICAgICAgICBuZXcgVGlwcHkoJy50aXBweScse1xyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246ICdyaWdodCcsXHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb246ICdmYWRlJyxcclxuICAgICAgICAgICAgICAgIGR1cmF0aW9uOiAzMDAsXHJcbiAgICAgICAgICAgICAgICBhcnJvdzogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIGFuaW1hdGVGaWxsOiB0cnVlLFxyXG4gICAgICAgICAgICAgICAgc2l6ZTogJ2JpZydcclxuICAgICAgICAgICAgfSk7XHJcblxyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgIC8vIEFQSSByZWFsdGVkIEphdmFzY3JpcHRcclxuLy8gID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuXHJcbiAgICAvLyBvbiBzdWNjZXNzIG9mIGluc3RhcG9zdCBBUElcclxuICAgIGZ1bmN0aW9uIGdyaWRMYXlvdXRlcihwb3N0cyl7XHJcbiAgICAgICBjb25zb2xlLmxvZyhwb3N0cyk7XHJcbiAgICAgICAgdmFyIGNvdW50ZXIgPSAxO1xyXG4gICAgICAgIGZvcih2YXIgaT0wO2k8cG9zdHMubGVuZ3RoO2krKyl7XHJcblxyXG4gICAgICAgICAgICAvL2NvbnNvbGUubG9nKCAkKCcjaW5zdGFncmlkJytjb3VudGVyKSk7XHJcbiAgICAgICAgICAgICQoJyNpbnN0YWdyaWQnK2NvdW50ZXIrJz4uaW5zdGEtcG9zdC1hcHBlbmRlcicpLmFwcGVuZCgnPGltZyBzcmM9XCInK3Bvc3RzW2ldKydcIj4nKTtcclxuICAgICAgICAgICAgY29uc29sZS5sb2coXCJoaVwiKTtcclxuICAgICAgICAgICAgY291bnRlcisrO1xyXG4gICAgICAgICAgICBpZihjb3VudGVyPT00KXtcclxuICAgICAgICAgICAgICAgIGNvdW50ZXIgPSAxO1xyXG4gICAgICAgICAgICB9XHJcblxyXG5cclxuICAgICAgIFxyXG4gICAgICAgIH1cclxuICAgIFxyXG4gICAgfVxyXG5cclxuXHJcbiAgICAgJC5nZXQoIFwiLi9mb2xpb19hc3NldHMvanNvbi9pbnN0YXBvc3QuanNvblwiLCBmdW5jdGlvbiggZGF0YSApIHtcclxuICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICAgdmFyIHBvc3RDb2xsZWN0b3IgPSBbXTtcclxuICAgICAgICAgICAgdmFyIHBvc3RzID0gZGF0YS5pdGVtcztcclxuICAgICAgICAgICAgdmFyIHBvc3RDb3VudGVyID0gMDtcclxuICAgICAgICAgICAgZm9yKHZhciBpPTA7aTw5O2krKyl7XHJcbiAgICAgICAgICAgICAgICBwb3N0Q29sbGVjdG9yLnB1c2gocG9zdHNbaV0uaW1hZ2VzLmxvd19yZXNvbHV0aW9uLnVybCk7XHJcbiAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICBcclxuICAgICAgICAgICAgIC8vIGNhbGxiYWNrIGZ1bmN0aW9uXHJcbiAgICAgICAgICAgICBncmlkTGF5b3V0ZXIocG9zdENvbGxlY3Rvcik7XHJcblxyXG5cclxufSk7Il0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
