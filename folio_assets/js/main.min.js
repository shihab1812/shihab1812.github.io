function msieversion(){return window.navigator.userAgent.indexOf("MSIE ")>0||navigator.userAgent.match(/Trident.*rv\:11\./),!1}function gridLayouter(o){console.log(o);for(var n=1,t=0;t<o.length;t++)$("#instagrid"+n).append('<div class="col-md-12 insta-post-appender"><img src="'+o[t]+'"></div>'),console.log("hi"),4==++n&&(n=1)}window.sr=ScrollReveal(),sr.reveal("#intro",{duration:2e3}),sr.reveal("#my-work",{duration:3e3}),$(window).scroll(function(){$(".navbar").offset().top>50?$(".navbar-fixed-top").addClass("top-nav-collapse"):$(".navbar-fixed-top").removeClass("top-nav-collapse")}),$(function(){$(document).on("click","a.page-scroll",function(o){var n=$(this);$("html, body").stop().animate({scrollTop:$(n.attr("href")).offset().top},1500,"easeInOutExpo"),o.preventDefault()})}),new Tippy(".tippy",{position:"right",animation:"fade",duration:300,arrow:!0,animateFill:!0,size:"big"}),$.get("./folio_assets/json/instapost.json",function(o){for(var n=[],t=o.items,e=0;e<9;e++)n.push(t[e].images.low_resolution.url);gridLayouter(n)});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm1haW4uanMiXSwibmFtZXMiOlsibXNpZXZlcnNpb24iLCJ3aW5kb3ciLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpbmRleE9mIiwibWF0Y2giLCJncmlkTGF5b3V0ZXIiLCJwb3N0cyIsImNvbnNvbGUiLCJsb2ciLCJjb3VudGVyIiwiaSIsImxlbmd0aCIsIiQiLCJhcHBlbmQiLCJzciIsIlNjcm9sbFJldmVhbCIsInJldmVhbCIsImR1cmF0aW9uIiwic2Nyb2xsIiwib2Zmc2V0IiwidG9wIiwiYWRkQ2xhc3MiLCJyZW1vdmVDbGFzcyIsImRvY3VtZW50Iiwib24iLCJldmVudCIsIiRhbmNob3IiLCJ0aGlzIiwic3RvcCIsImFuaW1hdGUiLCJzY3JvbGxUb3AiLCJhdHRyIiwicHJldmVudERlZmF1bHQiLCJUaXBweSIsInBvc2l0aW9uIiwiYW5pbWF0aW9uIiwiYXJyb3ciLCJhbmltYXRlRmlsbCIsInNpemUiLCJnZXQiLCJkYXRhIiwicG9zdENvbGxlY3RvciIsIml0ZW1zIiwicHVzaCIsImltYWdlcyIsImxvd19yZXNvbHV0aW9uIiwidXJsIl0sIm1hcHBpbmdzIjoiQUFZQSxRQUFBQSxlQVdBLE1BVEFDLFFBQUFDLFVBQUFDLFVBQ0FDLFFBQUEsU0FFQSxHQUFBRixVQUFBQyxVQUFBRSxNQUFBLHNCQU1BLEVBcURBLFFBQUFDLGNBQUFDLEdBQ0FDLFFBQUFDLElBQUFGLEVBRUEsS0FBQSxHQURBRyxHQUFBLEVBQ0FDLEVBQUEsRUFBQUEsRUFBQUosRUFBQUssT0FBQUQsSUFHQUUsRUFBQSxhQUFBSCxHQUFBSSxPQUFBLHdEQUFBUCxFQUFBSSxHQUFBLFlBQ0FILFFBQUFDLElBQUEsTUFFQSxLQURBQyxJQUVBQSxFQUFBLEdBbkRBVCxPQUFBYyxHQUFBQyxlQUNBRCxHQUFBRSxPQUFBLFVBQUFDLFNBQUEsTUFDQUgsR0FBQUUsT0FBQSxZQUFBQyxTQUFBLE1BR0FMLEVBQUFaLFFBQUFrQixPQUFBLFdBQ0FOLEVBQUEsV0FBQU8sU0FBQUMsSUFBQSxHQUNBUixFQUFBLHFCQUFBUyxTQUFBLG9CQUVBVCxFQUFBLHFCQUFBVSxZQUFBLHNCQUtBVixFQUFBLFdBQ0FBLEVBQUFXLFVBQUFDLEdBQUEsUUFBQSxnQkFBQSxTQUFBQyxHQUNBLEdBQUFDLEdBQUFkLEVBQUFlLEtBQ0FmLEdBQUEsY0FBQWdCLE9BQUFDLFNBQ0FDLFVBQUFsQixFQUFBYyxFQUFBSyxLQUFBLFNBQUFaLFNBQUFDLEtBQ0EsS0FBQSxpQkFDQUssRUFBQU8scUJBTUEsR0FBQUMsT0FBQSxVQUNBQyxTQUFBLFFBQ0FDLFVBQUEsT0FDQWxCLFNBQUEsSUFDQW1CLE9BQUEsRUFDQUMsYUFBQSxFQUNBQyxLQUFBLFFBNkJBMUIsRUFBQTJCLElBQUEscUNBQUEsU0FBQUMsR0FLQSxJQUFBLEdBSEFDLE1BQ0FuQyxFQUFBa0MsRUFBQUUsTUFFQWhDLEVBQUEsRUFBQUEsRUFBQSxFQUFBQSxJQUNBK0IsRUFBQUUsS0FBQXJDLEVBQUFJLEdBQUFrQyxPQUFBQyxlQUFBQyxJQUlBekMsY0FBQW9DIiwiZmlsZSI6Im1haW4ubWluLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbi8qKiBAYXV0aG9yIFNoaWhhYiBQTSAoIFVJIERldmVsb3BlciApXHJcbiAqICBMb2FkaW5nIHRoZSBtYWluIGFwcCBtb2R1bGUgd2l0aCB0aGUgZGVwZW5kZW50IG1vZHVsZXMgXHJcbiAqL1xyXG5cclxuLy8gPT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT1cclxuICAgIC8vIFVzZXIgRXhwZXJpZW5jZSByZWxhdGVkIEphdmFTY3JpcHRcclxuLy8gID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICAgICAgICAgIC8vRGVjYWxhcmUgdmFyc1xyXG4gICAgIFxyXG5cclxuICAgICAgICAgICAgLy9jaGVja2luZyB3ZXRoZXIgdGhlIHVzZXIgaXMgdXNpbmcgSUUgXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIG1zaWV2ZXJzaW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgIHZhciB1YSA9IHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50O1xyXG4gICAgICAgICAgICAgICAgdmFyIG1zaWUgPSB1YS5pbmRleE9mKFwiTVNJRSBcIik7XHJcblxyXG4gICAgICAgICAgICAgICAgaWYgKG1zaWUgPiAwIHx8ICEhbmF2aWdhdG9yLnVzZXJBZ2VudC5tYXRjaCgvVHJpZGVudC4qcnZcXDoxMVxcLi8pKSAgLy8gSWYgSW50ZXJuZXQgRXhwbG9yZXIsIHJldHVybiB2ZXJzaW9uIG51bWJlclxyXG4gICAgICAgICAgICAgICAge1xyXG4gICAgICAgICAgICAgICAgLy8gcG9wIHVwIGEgbW9kYWwgYm94IHNheWluZyBmb3IgYmV0dGVyIGV4cGVyaWVuY2UgSSByZWNvbW1lbmQgdG8gdXNlIGNocm9tZSBvciBmaXJlZm94IG9yIHNhZmFyaVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuXHJcbi8vIG1zaWV2ZXJzaW9uKCk7IC8vIGZvciB0aGUgbW9tZW50IGNvbW1lbnRlZCB0aGlzIGNvZGUgbG90IHRvIHdvcmsgb24gdGhpcyBhdCBsYXN0XHJcblxyXG5cclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICAvLyBEZXNpZ24gUmVhbHRlZCBKYXZhc2NyaXB0XHJcbi8vICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PVxyXG5cclxuICAgICAgICAgICAgLy8gSmF2YVNjcmlwdFxyXG4gICAgICAgICAgICB3aW5kb3cuc3IgPSBTY3JvbGxSZXZlYWwoKTtcclxuICAgICAgICAgICAgc3IucmV2ZWFsKCcjaW50cm8nLHsgZHVyYXRpb246IDIwMDAgfSk7XHJcbiAgICAgICAgICAgIHNyLnJldmVhbCgnI215LXdvcmsnLHsgZHVyYXRpb246IDMwMDAgfSk7XHJcblxyXG4gICAgICAgICAgICAvLyBqUXVlcnkgdG8gY29sbGFwc2UgdGhlIG5hdmJhciBvbiBzY3JvbGxcclxuICAgICAgICAgICAgJCh3aW5kb3cpLnNjcm9sbChmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGlmICgkKFwiLm5hdmJhclwiKS5vZmZzZXQoKS50b3AgPiA1MCkge1xyXG4gICAgICAgICAgICAgICAgICAgICQoXCIubmF2YmFyLWZpeGVkLXRvcFwiKS5hZGRDbGFzcyhcInRvcC1uYXYtY29sbGFwc2VcIik7XHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICQoXCIubmF2YmFyLWZpeGVkLXRvcFwiKS5yZW1vdmVDbGFzcyhcInRvcC1uYXYtY29sbGFwc2VcIik7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgLy9qUXVlcnkgZm9yIHBhZ2Ugc2Nyb2xsaW5nIGZlYXR1cmUgLSByZXF1aXJlcyBqUXVlcnkgRWFzaW5nIHBsdWdpblxyXG4gICAgICAgICAgICAkKGZ1bmN0aW9uKCkge1xyXG4gICAgICAgICAgICAgICAgJChkb2N1bWVudCkub24oJ2NsaWNrJywgJ2EucGFnZS1zY3JvbGwnLCBmdW5jdGlvbihldmVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciAkYW5jaG9yID0gJCh0aGlzKTtcclxuICAgICAgICAgICAgICAgICAgICAkKCdodG1sLCBib2R5Jykuc3RvcCgpLmFuaW1hdGUoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBzY3JvbGxUb3A6ICQoJGFuY2hvci5hdHRyKCdocmVmJykpLm9mZnNldCgpLnRvcFxyXG4gICAgICAgICAgICAgICAgICAgIH0sIDE1MDAsICdlYXNlSW5PdXRFeHBvJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuXHJcblxyXG4gICAgICAgICAgICAvLyBUb29sdGlwIEdlbmVyYXRvciBjbGFzcyBcclxuICAgICAgICAgICAgbmV3IFRpcHB5KCcudGlwcHknLHtcclxuICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAncmlnaHQnLFxyXG4gICAgICAgICAgICAgICAgYW5pbWF0aW9uOiAnZmFkZScsXHJcbiAgICAgICAgICAgICAgICBkdXJhdGlvbjogMzAwLFxyXG4gICAgICAgICAgICAgICAgYXJyb3c6IHRydWUsXHJcbiAgICAgICAgICAgICAgICBhbmltYXRlRmlsbDogdHJ1ZSxcclxuICAgICAgICAgICAgICAgIHNpemU6ICdiaWcnXHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuXHJcbi8vID09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcbiAgICAvLyBBUEkgcmVhbHRlZCBKYXZhc2NyaXB0XHJcbi8vICA9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09XHJcblxyXG4gICAgLy8gb24gc3VjY2VzcyBvZiBpbnN0YXBvc3QgQVBJXHJcbiAgICBmdW5jdGlvbiBncmlkTGF5b3V0ZXIocG9zdHMpe1xyXG4gICAgICAgY29uc29sZS5sb2cocG9zdHMpO1xyXG4gICAgICAgIHZhciBjb3VudGVyID0gMTtcclxuICAgICAgICBmb3IodmFyIGk9MDtpPHBvc3RzLmxlbmd0aDtpKyspe1xyXG5cclxuICAgICAgICAgICAgLy9jb25zb2xlLmxvZyggJCgnI2luc3RhZ3JpZCcrY291bnRlcikpO1xyXG4gICAgICAgICAgICAkKCcjaW5zdGFncmlkJytjb3VudGVyKS5hcHBlbmQoJzxkaXYgY2xhc3M9XCJjb2wtbWQtMTIgaW5zdGEtcG9zdC1hcHBlbmRlclwiPjxpbWcgc3JjPVwiJytwb3N0c1tpXSsnXCI+PC9kaXY+Jyk7XHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiaGlcIik7XHJcbiAgICAgICAgICAgIGNvdW50ZXIrKztcclxuICAgICAgICAgICAgaWYoY291bnRlcj09NCl7XHJcbiAgICAgICAgICAgICAgICBjb3VudGVyID0gMTtcclxuICAgICAgICAgICAgfVxyXG5cclxuXHJcbiAgICAgICBcclxuICAgICAgICB9XHJcbiAgICBcclxuICAgIH1cclxuXHJcblxyXG4gICAgICQuZ2V0KCBcIi4vZm9saW9fYXNzZXRzL2pzb24vaW5zdGFwb3N0Lmpzb25cIiwgZnVuY3Rpb24oIGRhdGEgKSB7XHJcbiAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgIHZhciBwb3N0Q29sbGVjdG9yID0gW107XHJcbiAgICAgICAgICAgIHZhciBwb3N0cyA9IGRhdGEuaXRlbXM7XHJcbiAgICAgICAgICAgIHZhciBwb3N0Q291bnRlciA9IDA7XHJcbiAgICAgICAgICAgIGZvcih2YXIgaT0wO2k8OTtpKyspe1xyXG4gICAgICAgICAgICAgICAgcG9zdENvbGxlY3Rvci5wdXNoKHBvc3RzW2ldLmltYWdlcy5sb3dfcmVzb2x1dGlvbi51cmwpO1xyXG4gICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAvLyBjYWxsYmFjayBmdW5jdGlvblxyXG4gICAgICAgICAgICAgZ3JpZExheW91dGVyKHBvc3RDb2xsZWN0b3IpO1xyXG5cclxuXHJcbn0pOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
