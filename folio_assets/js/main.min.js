function msieversion(){return window.navigator.userAgent.indexOf("MSIE ")>0||navigator.userAgent.match(/Trident.*rv\:11\./),!1}function gridLayouter(e){console.log(e);for(var o=1,a=0;a<e.length;a++)$("#instagrid"+o).append('<div class="col-md-12  no-padding insta-post-appender"><img src="'+e[a]+'"></div>'),console.log("hi"),4==++o&&(o=1)}$(window).scroll(function(){$(".navbar").offset().top>50?$(".navbar-fixed-top").addClass("top-nav-collapse"):$(".navbar-fixed-top").removeClass("top-nav-collapse")}),$(function(){$("#loader-sec").show().delay(3800).fadeOut(),document.getElementsByClassName("explore-pro-link").href="http://www.google.com/",$(document).on("click","a.page-scroll",function(e){var o=$(this);$("html, body").stop().animate({scrollTop:$(o.attr("href")).offset().top},1500,"easeInOutExpo"),e.preventDefault()}),$(".element").typed({strings:["First sentence.","Second sentence."],typeSpeed:0,loop:!0}),setTimeout(function(){window.sr=ScrollReveal(),sr.reveal("#intro",{duration:2e3}),sr.reveal("#project-1",{duration:2600}),sr.reveal("#project-2",{duration:2600}),sr.reveal("#project-3",{duration:2600}),sr.reveal("#heading-1",{duration:2600}),sr.reveal("#heading-2",{duration:2600}),sr.reveal("#heading-3",{duration:2600}),sr.reveal("#heading-4",{duration:2600})},3750),$(".owl-carousel").owlCarousel({responsive:{0:{items:1,nav:!0,loop:!0,margin:10,responsiveClass:!0,autoplay:!0,autoplayTimeout:3e3,autoplayHoverPause:!1},600:{items:3,nav:!1,loop:!0,margin:10,responsiveClass:!0,autoplay:!0,autoplayTimeout:3e3,autoplayHoverPause:!1},1e3:{items:5,nav:!1,dots:!0,loop:!0,margin:10,responsiveClass:!0,autoplay:!0,autoplayTimeout:3e3,autoplayHoverPause:!1}}})}),new Tippy(".tippy",{position:"right",animation:"fade",duration:300,arrow:!0,animateFill:!0,size:"big"}),$.get("./folio_assets/json/instapost.json",function(e){for(var o=[],a=e.items,t=0;t<9;t++)o.push(a[t].images.low_resolution.url);gridLayouter(o)});
//# sourceMappingURL=data:application/json;base64,
